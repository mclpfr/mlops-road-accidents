name: Test of the ML Pipeline for Road Accidents

on:
  push:  
    branches:
      - main
  pull_request:  
    branches:
      - main
  workflow_dispatch:  

jobs:
  test-pipeline:
    name: Test Pipeline
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: accidents
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Recreate config.yaml from secret
        run: |
          echo "${{ secrets.CONFIG_YAML }}" > config.yaml

      - name: Build and run extract_data container
        run: |
          docker build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -t extract_data_service -f src/extract_data/Dockerfile .
          docker run --rm -v $(pwd)/data:/app/data extract_data_service

      - name: Build and run synthet_data container
        run: |
          docker build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -t synthet_data_service -f src/synthet_data/Dockerfile .
          docker run --rm -v $(pwd)/data:/app/data synthet_data_service

      - name: Build and run prepare_data container
        run: |
          docker build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -t prepare_data_service -f src/prepare_data/Dockerfile .
          docker run --rm -v $(pwd)/data:/app/data prepare_data_service

      - name: Build and run train_model container
        run: |
          docker build --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -t train_model_service -f src/train_model/Dockerfile .
          docker run --rm -v $(pwd)/data:/app/data train_model_service

      - name: Run tests
        working-directory: .
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest tests/ -v

      - name: Build and push extract_data image
        if: success()
        run: |
          docker tag extract_data_service ${{ secrets.DOCKER_USERNAME }}/extract_data_service:${{ github.run_number }}
          docker tag extract_data_service ${{ secrets.DOCKER_USERNAME }}/extract_data_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/extract_data_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/extract_data_service:latest

      - name: Build and push synthet_data image
        if: success()
        run: |
          docker tag synthet_data_service ${{ secrets.DOCKER_USERNAME }}/synthet_data_service:${{ github.run_number }}
          docker tag synthet_data_service ${{ secrets.DOCKER_USERNAME }}/synthet_data_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/synthet_data_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/synthet_data_service:latest

      - name: Build and push prepare_data image
        if: success()
        run: |
          docker tag prepare_data_service ${{ secrets.DOCKER_USERNAME }}/prepare_data_service:${{ github.run_number }}
          docker tag prepare_data_service ${{ secrets.DOCKER_USERNAME }}/prepare_data_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/prepare_data_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/prepare_data_service:latest

      - name: Build and push train_model image
        if: success()
        run: |
          docker tag train_model_service ${{ secrets.DOCKER_USERNAME }}/train_model_service:${{ github.run_number }}
          docker tag train_model_service ${{ secrets.DOCKER_USERNAME }}/train_model_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/train_model_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/train_model_service:latest

      - name: Build and push postgres image
        if: success()
        run: |
          docker build -t postgres_service -f src/postgresql/Dockerfile .
          docker tag postgres_service ${{ secrets.DOCKER_USERNAME }}/postgres_service:${{ github.run_number }}
          docker tag postgres_service ${{ secrets.DOCKER_USERNAME }}/postgres_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/postgres_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/postgres_service:latest

      - name: Build and push import_data image
        if: success()
        run: |
          docker build -t import_data_service -f src/import_data/Dockerfile .
          docker tag import_data_service ${{ secrets.DOCKER_USERNAME }}/import_data_service:${{ github.run_number }}
          docker tag import_data_service ${{ secrets.DOCKER_USERNAME }}/import_data_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/import_data_service:${{ github.run_number }}
          docker push ${{ secrets.DOCKER_USERNAME }}/import_data_service:latest
