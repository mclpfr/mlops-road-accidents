"""Streamlit page: G√©rard - Agent MLOps Autonome

Cette page affiche une interface iframe qui se connecte au service agent
via WebSocket pour fournir une interface de chat en temps r√©el.
"""
from __future__ import annotations

import streamlit as st
import docker
from pathlib import Path

def show_chatbot_page():
    """Displays the chatbot page with an iframe to the agent interface."""
    # -----------------------------------------------------------------------------
    # Configuration de l'interface
    # -----------------------------------------------------------------------------
    st.title("ü§ñ G√©rard - Agent MLOps Autonome")
    
    # Afficher une description de l'agent
    st.markdown("""
    G√©rard est votre assistant MLOps autonome. Il peut surveiller vos conteneurs Docker, 
    ex√©cuter des commandes, et vous aider √† diagnostiquer des probl√®mes dans votre infrastructure.
    
    ### Fonctionnalit√©s
    - Surveillance en temps r√©el des conteneurs Docker
    - Affichage des logs des conteneurs
    - Red√©marrage des services en cas de probl√®me
    - Analyse des performances et des erreurs
    
    Interagissez directement avec G√©rard dans l'interface ci-dessous.
    """)
    
    # D√©terminer l'URL de l'agent
    # URL interne pour les communications entre conteneurs
    agent_internal_url = "http://agent:8002"
    # URL externe pour l'acc√®s depuis le navigateur
    agent_external_url = "http://localhost:8002"
    
    # Cr√©er un iframe pour afficher l'interface de l'agent
    st.components.v1.iframe(
        src=agent_external_url,
        height=700,
        scrolling=True
    )
    
    # Ajouter un lien direct vers l'interface de l'agent en cas de probl√®me avec l'iframe
    st.markdown(f"""Si l'iframe ne s'affiche pas correctement, [cliquez ici pour acc√©der directement √† l'interface de G√©rard]({agent_external_url}).""")

    # Ajouter un bouton pour rafra√Æchir l'iframe si n√©cessaire
    if st.button("Rafra√Æchir l'interface"):
        st.rerun()

    # -----------------------------------------------------------------------------
    # Agent enable / disable controls
    # -----------------------------------------------------------------------------
    try:
        cli = docker.from_env()
        agent_container = cli.containers.get("agent")
        is_running = agent_container.status == "running"
    except Exception:
        agent_container = None
        is_running = False

    status_str = "üü¢ Actif" if is_running else "üî¥ Inactif"
    st.markdown(f"**Statut de l'agent :** {status_str}")

    # Boutons pour activer/d√©sactiver l'agent
    if agent_container:
        col1, col2 = st.columns(2)
        with col1:
            if is_running and st.button("üõë D√©sactiver l'agent"):
                try:
                    agent_container.stop(timeout=10)
                    st.success("Agent arr√™t√©.")
                    st.rerun()
                except Exception as exc:
                    st.error(f"Erreur : {exc}")
        with col2:
            if not is_running and st.button("‚ñ∂Ô∏è Activer l'agent"):
                try:
                    agent_container.start()
                    st.success("Agent d√©marr√©.")
                    st.rerun()
                except Exception as exc:
                    st.error(f"Erreur : {exc}")
    else:
        st.warning("Conteneur 'agent' introuvable.")
    
    # -----------------------------------------------------------------------------
    # Informations sur l'utilisation
    # -----------------------------------------------------------------------------
    st.markdown("### Commandes utiles")
    
    st.markdown("""
    Vous pouvez utiliser les commandes suivantes dans l'interface de G√©rard :
    
    - `!help` : Affiche l'aide des commandes disponibles
    - `!logs <conteneur>` : Affiche les logs d'un conteneur
    - `!restart <conteneur>` : Red√©marre un conteneur
    - `!status [<conteneur>]` : Affiche le statut d'un ou de tous les conteneurs
    
    Vous pouvez √©galement poser des questions en langage naturel comme :
    - "Est-ce que Grafana fonctionne bien ?"
    - "Quels conteneurs utilisent trop de m√©moire ?"
    - "Y a-t-il des erreurs critiques dans les logs ?"
    """)
    
    # Ajouter un lien pour acc√©der directement √† l'interface de l'agent
    st.markdown("""
    <div style="margin-top: 20px; padding: 10px; background-color: #f0f2f6; border-radius: 5px;">
        <p>Si l'iframe ne s'affiche pas correctement, vous pouvez acc√©der directement √† l'interface de G√©rard √† l'adresse suivante :</p>
        <a href="http://localhost:8002" target="_blank">http://localhost:8002</a>
    </div>
    """, unsafe_allow_html=True)