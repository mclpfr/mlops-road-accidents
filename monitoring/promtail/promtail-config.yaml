server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: debug

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push
    batchwait: 1s
    batchsize: 102400
    timeout: 10s
    backoff_config:
      min_period: 100ms
      max_period: 10s
      max_retries: 3

scrape_configs:
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'project'
      - source_labels: ['__meta_docker_container_label_logging_job']
        target_label: 'job'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        regex: '.+'
        action: keep
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'
      - source_labels: ['__meta_docker_container_image']
        target_label: 'image'
    pipeline_stages:
      # 1) Parse Docker JSON log envelope; adds labels like container, stream, etc.
      - docker: {}
      
      # 2) Try to extract structured fields if the application logs JSON
      - json:
          expressions:
            level:
            severity:
            status:
            message:
          # Do not fail if not JSON
          drop_malformed: true
      
      # 3) Fallback regex for plain-text levels (ERROR/WARN/INFO/DEBUG) or key-value level=ERROR
      - regex:
          expression: '(?i)(?:\blevel[=: ]+)(?P<level_kv>error|warn|warning|info|debug)|\b(?P<level_word>error|warn|warning|info|debug)\b'
      
      # 4) Normalize into a single 'level' variable, preferring JSON 'level'/'severity'
      - template:
          source: level
          template: '{{ if .level }}{{ ToLower .level }}{{ else if .severity }}{{ ToLower .severity }}{{ else if .level_kv }}{{ ToLower .level_kv }}{{ else if .level_word }}{{ ToLower .level_word }}{{ end }}'
      
      # 5) Normalize 'warning' to 'warn'
      - replace:
          source: level
          expression: '(?i)^warning$'
          replace: 'warn'
      
      # 6) Promote level to label only when it exists; this does NOT use stderr/stdout mapping
      - labels:
          level:
