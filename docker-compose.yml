version: '3.8'

x-user-info: &user-info
  USER_ID: "1000"
  GROUP_ID: "1000"

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow/Dockerfile
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
    - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    - AIRFLOW__WEBSERVER__RBAC=True
    - AIRFLOW_HOME=/opt/airflow
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    # Utiliser un volume nommé pour les logs au lieu d'un montage direct
    - airflow_logs:/opt/airflow/logs
  user: "root"
  depends_on:
    postgres-airflow:
      condition: service_healthy

services:
  extract_data:
    build:
      context: .
      dockerfile: src/extract_data/Dockerfile
      args:
        <<: *user-info
    container_name: extract_data_service
    command: python extract_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  synthet_data:
    build:
      context: .
      dockerfile: src/synthet_data/Dockerfile
      args:
        <<: *user-info
    container_name: synthet_data_service
    command: python synthet_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      - extract_data

  prepare_data:
    build:
      context: .
      dockerfile: src/prepare_data/Dockerfile
      args:
        <<: *user-info
    container_name: prepare_data_service
    command: python prepare_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      - synthet_data
      
  import_data:
    build:
      context: .
      dockerfile: src/import_data/Dockerfile
      args:
        <<: *user-info
    container_name: import_data_service
    command: >
      sh -c "./wait-for-postgres.sh postgres 5432 && python import_data.py"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=road_accidents
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./src/import_data/wait-for-postgres.sh:/app/wait-for-postgres.sh
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy

  train_model:
    build:
      context: .
      dockerfile: src/train_model/Dockerfile
      args:
        <<: *user-info
    container_name: train_model_service
    user: root
    command: >
      sh -c "
        chown -R appuser:appuser /app/models;
        rm -f /app/models/train_model.done;
        su -c 'python train_model.py' appuser
      "
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./.git:/app/.git
      - ./dvc.yaml:/app/dvc.yaml
    working_dir: /app
    depends_on:
      - prepare_data

  postgres:
    build:
      context: .
      dockerfile: src/postgresql/Dockerfile
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: road_accidents
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Pas de dépendance à train_model pour éviter la boucle circulaire



  save_best_model:
    build:
      context: .
      dockerfile: src/save_best_model/Dockerfile
    container_name: save_best_model_service
    command: python save_best_model.py
    volumes:
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    container_name: api_service
    volumes:
      - ./models:/app/models
    ports:
      - "8000:8000"
    depends_on:
      - train_model
      - save_best_model

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_service
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./monitoring/grafana/provisioning/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
      - grafana_data:/var/lib/grafana
    depends_on:
      - postgres

  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /opt/airflow/scripts/entrypoint.sh
    command: echo "Airflow initialized successfully"
    restart: on-failure
    depends_on:
      postgres-airflow:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_started

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_started

volumes:
  postgres_data:
  grafana_data:
  postgres_airflow_data:
  airflow_logs:
