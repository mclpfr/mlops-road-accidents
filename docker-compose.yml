x-user-info: &user-info
  USER_ID: "1000"
  GROUP_ID: "1000"

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow/Dockerfile
    args:
      <<: *user-info
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    # Ensure root user (used in some images and healthchecks) can import Airflow installed in the airflow user's site-packages
    - PYTHONPATH=/home/airflow/.local/lib/python3.8/site-packages
    - AIRFLOW_ADMIN_PASSWORD=admin
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
    - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
    - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    - AIRFLOW__WEBSERVER__RBAC=True
    - AIRFLOW_HOME=/opt/airflow
    - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - airflow_logs:/opt/airflow/logs
    - ./.:/opt/project
  user: "root"
  depends_on:
    postgres-airflow:
      condition: service_healthy

services:
  extract_data:
    build:
      context: .
      dockerfile: src/extract_data/Dockerfile
      args:
        <<: *user-info
    container_name: extract_data_service
    command: python extract_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  synthet_data:
    build:
      context: .
      dockerfile: src/synthet_data/Dockerfile
      args:
        <<: *user-info
    container_name: synthet_data_service
    command: python synthet_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      - extract_data

  prepare_data:
    build:
      context: .
      dockerfile: src/prepare_data/Dockerfile
      args:
        <<: *user-info
    container_name: prepare_data_service
    command: python prepare_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
    working_dir: /app
    depends_on:
      - synthet_data
      
  import_data:
    build:
      context: .
      dockerfile: src/import_data/Dockerfile
      args:
        <<: *user-info
    container_name: import_data_service
    command: >
      sh -c "/app/wait-for-postgres.sh postgres 5432 && python import_data.py"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=road_accidents
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./src/import_data/wait-for-postgres.sh:/app/wait-for-postgres.sh
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy

  train_model:
    build:
      context: .
      dockerfile: src/train_model/Dockerfile
      args:
        <<: *user-info
    container_name: train_model_service
    user: root
    command: >
      sh -c "
        chown -R appuser:appuser /app/models;
        rm -f /app/models/train_model.done;
        su -c 'python train_model.py' appuser
      "
    environment:
      - DVC_REMOTE=${DVC_REMOTE}
      - DVC_REMOTE_URL=${DVC_REMOTE_URL}
      - DVC_ENDPOINT_URL=${DVC_ENDPOINT_URL}
      - DVC_USERNAME=${DVC_USERNAME}
      - DVC_PASSWORD=${DVC_PASSWORD}
    volumes:
      - ./data:/app/data:rw
      - ./models:/app/models:rw
      - ./config.yaml:/app/config.yaml:rw
      - ./.git:/app/.git:rw
      - ./dvc.yaml:/app/dvc.yaml:rw
      - ./.dvc:/app/.dvc:rw
      - ./src/prepare_data:/app/src/prepare_data:ro
      - ./src/synthet_data:/app/src/synthet_data:ro
    working_dir: /app
    depends_on:
      - prepare_data
      - synthet_data

  postgres:
    build:
      context: .
      dockerfile: src/postgresql/Dockerfile
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: road_accidents
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    container_name: api_service
    build:
      context: .
      dockerfile: src/api/Dockerfile
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      - train_model

  streamlit:
    container_name: streamlit
    build:
      context: .
      dockerfile: streamlit/app/Dockerfile
    ports:
      - "8501:8501"
    environment:
      - AIRFLOW_BASE_URL=http://localhost:8080
      - GRAFANA_BASE_URL=http://localhost:3000
      - EVIDENTLY_BASE_URL=http://evidently-api:8001
    volumes:
      - ./:/app
    depends_on:
      - airflow-webserver
      - grafana
      - evidently-api

  evidently-api:                       
    container_name: evidently-api
    build:                                                
      context: ./evidently/api        
      dockerfile: Dockerfile
      args:  
        <<: *user-info
    user: "${USER_ID}:${GROUP_ID}"
    volumes:                 
      - ./evidently/api:/app
      - ./evidently/ui:/app/ui/target
      - ./evidently/reference:/app/reference     
      - ./evidently/current:/app/current     
    ports:
      - "8001:8001"
    environment:   
      - EVIDENTLY_PROJECT_NAME=Road Accidents MLOps
      - EVIDENTLY_PROJECT_DESCRIPTION=Monitoring dashboard for road accident prediction model
    restart: always
    networks:
      - default

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus_service
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/  # Monte tout le rÃ©pertoire
      - prometheus_data:/prometheus
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - api
      - evidently-api
      - alertmanager
    networks:
      - default

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager_service
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - default

  loki:
    image: grafana/loki:2.9.0
    container_name: loki_service
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail_service
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_service
    restart: always
    ports:
      - 3000:3000
    networks:
      - default
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_X_FRAME_OPTIONS=allow-from-all
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - alertmanager
      - postgres
      - loki

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor_service
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
      
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    restart: on-failure
    depends_on:
      postgres-airflow:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      postgres-airflow:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  postgres_airflow_data:
  airflow_logs:
