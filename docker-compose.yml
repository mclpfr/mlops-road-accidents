x-user-info: &user-info
  USER_ID: "1000"
  GROUP_ID: "1000"

x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow/Dockerfile
    args:
      <<: *user-info
  user: "0"
  environment:
    - AIRFLOW_HOME=/opt/airflow
    - AIRFLOW__WEBSERVER__BASE_URL=https://vmi2734167.contaboserver.net/airflow
    - AIRFLOW__WEBSERVER__EXPOSED_URL_PREFIX=/airflow
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - airflow_logs:/opt/airflow/logs
    - ./.:/opt/project
    - airflow_static:/opt/airflow/www/static

  deploy:
    resources:
      limits:
        cpus: '2.0'
        memory: 4G
      reservations:
        cpus: '0.5'
        memory: 1G
    logging: *logging
  depends_on:
    postgres-airflow:
      condition: service_healthy




services:
  extract_data:
    logging: *logging
    build:
      context: .
      dockerfile: src/extract_data/Dockerfile
      args:
        <<: *user-info
    container_name: extract_data_service
    command: python extract_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  synthet_data:
    logging: *logging
    build:
      context: .
      dockerfile: src/synthet_data/Dockerfile
      args:
        <<: *user-info
    container_name: synthet_data_service
    command: python synthet_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 512M


  prepare_data:
    logging: *logging
    build:
      context: .
      dockerfile: src/prepare_data/Dockerfile
      args:
        <<: *user-info
    container_name: prepare_data_service
    command: python prepare_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  import_data:
    logging: *logging
    build:
      context: .
      dockerfile: src/import_data/Dockerfile
      args:
        <<: *user-info
    container_name: import_data_service
    command: >
      sh -c "/app/wait-for-postgres.sh postgres 5432 && python import_data.py"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./src/import_data/wait-for-postgres.sh:/app/wait-for-postgres.sh
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  train_model:
    logging: *logging
    build:
      context: .
      dockerfile: src/train_model/Dockerfile
      args:
        <<: *user-info
    container_name: train_model_service
    user: root
    command: >
      sh -c "
        chown -R appuser:appuser /app/models;
        rm -f /app/models/train_model.done;
        su -c 'python src/train_model/train_model.py' appuser
      "
    volumes:
      # Mount entire project to retain Git & DVC context and source code
      - ./:/app
      # Persist models and data between container runs
      - ./models:/app/models
      - ./data:/app/data
    working_dir: /app
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G


  mlflow_management:
    logging: *logging
    build:
      context: ./src/mlflow_management
      dockerfile: Dockerfile
    image: mlops-road-accidents-mlflow-management
    container_name: mlflow_management_service
    user: root
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  postgres:
    logging: *logging
    build:
      context: .
      dockerfile: src/postgresql/Dockerfile
    container_name: postgres_service
    volumes:
      - ./config.yaml:/app/config.yaml
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 6G
        reservations:
          cpus: '0.3'
          memory: 512M
    networks:
      - streamlit_pg

  auth_api:
    container_name: auth_api_service
    build:
      context: .
      dockerfile: src/auth_api/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - "7999:7999"
    logging:
      <<: *logging
      options:
        max-size: "10m"
        max-file: "3"
        tag: "auth-api"
    labels:
      - "logging=promtail"
      - "logging_job=api"
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  predict_api:
    container_name: predict_api_service
    build:
      context: .
      dockerfile: src/predict_api/Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
      - ./data:/app/data
    ports:
      - "8000:8000"
    logging:
      <<: *logging
      options:
        max-size: "10m"
        max-file: "3"
        tag: "predict-api"
    labels:
      - "logging=promtail"
      - "logging_job=api"
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  streamlit:
    logging: *logging
    container_name: streamlit
    build:
      context: .
      dockerfile: streamlit/app/Dockerfile
    ports:
      - "8501:8501"
    command: streamlit run main.py --server.port=8501 --server.address=0.0.0.0
    volumes:
      - ./streamlit/app:/app
      - ./streamlit/config:/app/.streamlit
      # Mount project src so that `predict_api` and other modules are importable
      - ./src:/app/src
      # Provide global configuration file
      - ./config.yaml:/app/config.yaml
      # Mount data directory to access CSV files
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./agent/agent_events:/agent_events
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_MAX_UPLOAD_SIZE=2000
      - STREAMLIT_SERVER_MAX_MESSAGE_SIZE=2000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_SERVER_PORT=8501
      - MLFLOW_TRACKING_URI=http://mlflow_server:5000
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: always
    networks:
      - default
      - streamlit_pg
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.streamlit.rule=Host(`mlops.marcolopes.fr`)"
      - "traefik.http.routers.streamlit.entrypoints=websecure"
      - "traefik.http.routers.streamlit.tls.certresolver=letsencrypt"
      - "traefik.http.services.streamlit.loadbalancer.server.port=8501"

  log_processor:
    container_name: log_processor_service
    build:
      context: ./log_processor/app
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    volumes:
      - ./config.yaml:/app/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      postgres:
        condition: service_healthy
    restart: always

  agent:
    logging: *logging
    container_name: agent
    build:
      context: .
      dockerfile: agent/Dockerfile
    volumes:
      - ./agent:/app
      - ./config.yaml:/app/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./agent/agent_events:/agent_events
    ports:
      - "8003:8003"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agent.rule=Host(`mlops.marcolopes.fr`) && PathPrefix(`/agent`)"
      - "traefik.http.routers.agent.entrypoints=websecure"
      - "traefik.http.routers.agent.tls.certresolver=letsencrypt"
      - "traefik.http.services.agent.loadbalancer.server.port=8003"
      - "traefik.http.middlewares.agent-stripprefix.stripprefix.prefixes=/agent"
      - "traefik.http.routers.agent.middlewares=agent-stripprefix"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8003/healthz"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - default

  evidently-api:
    logging: *logging                       
    container_name: evidently-api
    build:                                                
      context: ./evidently/api        
      dockerfile: Dockerfile
      args:  
        <<: *user-info
    user: "root"
    volumes:                 
      - ./evidently/api:/app
      - ./evidently/ui:/app/ui/target
      - ./evidently/reference:/app/reference     
      - ./evidently/current:/app/current     
    ports:
      - "8001:8001"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evidently.rule=Host(`mlops.marcolopes.fr`) && PathPrefix(`/evidently`)"
      - "traefik.http.routers.evidently.entrypoints=websecure"
      - "traefik.http.routers.evidently.tls.certresolver=letsencrypt"
      - "traefik.http.services.evidently.loadbalancer.server.port=8001"
      - "traefik.http.middlewares.evidently-stripprefix.stripprefix.prefixes=/evidently"
      - "traefik.http.routers.evidently.middlewares=evidently-stripprefix"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    networks:
      - default

  prometheus:
    logging: *logging
    image: prom/prometheus:v2.47.2
    container_name: prometheus_service
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/  
      - prometheus_data:/prometheus
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

    networks:
      - default

  alertmanager:
    logging: *logging
    image: prom/alertmanager:latest
    container_name: alertmanager_service
    ports:
      - '9093:9093'
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - default

  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Let's Encrypt configuration
      - --certificatesresolvers.letsencrypt.acme.email=admin@marcolopes.fr
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      # Global HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Enable debug logs for SSL issues
      - --log.level=DEBUG
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8088:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    networks:
      - default
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Dashboard access
      - "traefik.http.routers.dashboard.rule=Host(`localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"

  loki:
    image: grafana/loki:2.9.0
    container_name: loki_service
    ports:
      - "3100:3100"
    environment:
      - USER_ID=1000
      - GROUP_ID=1000
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  promtail:
    logging: *logging
    image: grafana/promtail:2.9.0
    container_name: promtail_service
    restart: unless-stopped
    user: root
    privileged: true
    security_opt:
      - apparmor:unconfined
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
      - ./monitoring/promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/lib/docker:/var/lib/docker:ro
    command:
      - "-config.file=/etc/promtail/config.yaml"
      - "-config.expand-env=true"
    environment:
      - HOSTNAME=${HOSTNAME}
      - HOST_IP=${HOST_IP}
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  grafana:
    logging: *logging
    build:
      context: ./monitoring/grafana
    container_name: grafana_service
    restart: always
    labels:
      - "com.company.always_on=true"
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`mlops.marcolopes.fr`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    ports:
      - 3000:3000
    networks:
      - default
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./monitoring/grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/alerting:/etc/grafana/provisioning/alerting
      - ./monitoring/grafana/provisioning/dashboards/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./monitoring/grafana/provisioning/dashboards/json:/etc/grafana/provisioning/dashboards/json
      - grafana_data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor_service
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  postgres-airflow:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
      
  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres-airflow:
        condition: service_healthy
    user: "0"
    container_name: airflow-init
    restart: on-failure
    healthcheck:
      test: ["CMD", "airflow", "db", "check-migrations"]
      interval: 10s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 512M

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.airflow.rule=Host(`mlops.marcolopes.fr`) && PathPrefix(`/airflow`)"
      - "traefik.http.routers.airflow.entrypoints=websecure"
      - "traefik.http.routers.airflow.tls.certresolver=letsencrypt"
      - "traefik.http.services.airflow.loadbalancer.server.port=8080"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/healthz || exit 0"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G


  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      airflow-webserver:
        condition: service_healthy
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  drift-controller:
    build:
      context: ./drift-controller
      dockerfile: Dockerfile
    container_name: drift_controller_service
    ports:
      - "8002:8000"
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
      - MLFLOW_TRACKING_URI=http://mlflow_server:5000
      - AIRFLOW_URL=http://airflow-webserver:8080/api/v1/dags/road_accidents/dagRuns
      - AIRFLOW_USER=airflow
      - AIRFLOW_PASSWORD=airflow
      - DRIFT_THRESHOLD=0.5
      - CHECK_INTERVAL_SECONDS=10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

    networks:
      - default



networks:
  default:
    driver: bridge
  streamlit_pg:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  postgres_airflow_data:
  airflow_logs:
  airflow_static:
  agent_events:
