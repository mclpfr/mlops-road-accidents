version: '3.8'

x-user-info: &user-info
  USER_ID: "1000"
  GROUP_ID: "1000"

services:
  extract_data:
    build:
      context: .
      dockerfile: src/extract_data/Dockerfile
      args:
        <<: *user-info
    container_name: extract_data_service
    command: python extract_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  synthet_data:
    build:
      context: .
      dockerfile: src/synthet_data/Dockerfile
      args:
        <<: *user-info
    container_name: synthet_data_service
    command: >
      sh -c "
        while [ ! -f /app/data/raw/accidents_2023.csv ]; do
          echo 'Waiting for extract_data to finish...';
          sleep 5;
        done;
        python synthet_data.py
      "
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      - extract_data

  prepare_data:
    build:
      context: .
      dockerfile: src/prepare_data/Dockerfile
      args:
        <<: *user-info
    container_name: prepare_data_service
    command: >
      sh -c "
        while [ ! -f /app/data/raw/extract_data.done ]; do
          echo 'Waiting for extract_data to finish...';
          sleep 5;
        done;
        python prepare_data.py
      "
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      - synthet_data

  train_model:
    build:
      context: .
      dockerfile: src/train_model/Dockerfile
      args:
        <<: *user-info
    container_name: train_model_service
    user: root
    command: >
      sh -c "
        while [ ! -f /app/data/processed/prepared_data.done ]; do
          echo 'Waiting for prepare_data to finish...';
          sleep 5;
        done;
        chown -R appuser:appuser /app/models;
        rm -f /app/models/training.lock;
        su -c 'python train_model.py' appuser
      "
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
      - ./.git:/app/.git
      - ./dvc.yaml:/app/dvc.yaml
    working_dir: /app
    depends_on:
      - prepare_data

  postgres:
    build:
      context: .
      dockerfile: src/postgresql/Dockerfile
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      train_model:
        condition: service_started

  data_import:
    build:
      context: .
      dockerfile: src/data_import/Dockerfile
    container_name: data_import_service
    command: sh -c "/app/wait-for-postgres.sh postgres 5432 python3 /app/import_data.py"
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: road_accidents
    depends_on:
      postgres:
        condition: service_healthy

  save_best_model:
    build:
      context: .
      dockerfile: src/save_best_model/Dockerfile
    container_name: save_best_model_service
    command: python save_best_model.py
    volumes:
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    container_name: api_service
    volumes:
      - ./models:/app/models
    ports:
      - "8000:8000"
    depends_on:
      - train_model

#  auto_dvc:
#    build:
#      context: .
#      dockerfile: src/auto_dvc/Dockerfile
#      args:
#        <<: *user-info
#    container_name: auto_dvc_service
#    user: root
#    command: >
#      sh -c "
#        echo 'Waiting for extract_data, prepare_data, and train_model to complete...';
#        while [ ! -f /app/models/training.lock ]; do
#          echo 'Waiting for training to complete...';
#          sleep 5;
#        done;
#        chown -R appuser:appuser /app/.dvc;
#        su -c 'python auto_dvc.py' appuser
#      "
#    volumes:
#      - ./data:/app/data
#      - ./models:/app/models
#      - ./.dvc:/app/.dvc
#      - ./.dvc/config:/app/.dvc/config
#      - ./.dvcignore:/app/.dvcignore
#      - ./dvc.yaml:/app/dvc.yaml
#      - ./config.yaml:/app/config.yaml
#      - ./src:/app/src
#      - ./.git:/app/.git
#    working_dir: /app
#    depends_on:
#      - train_model
#
#  retrieve_data:
#    build:
#      context: .
#      dockerfile: src/retrieve_data/Dockerfile
#      args:
#        <<: *user-info
#    container_name: retrieve_data_service
#    user: root
#    command: >
#      su -c 'python retrieve_data.py' appuser
#    volumes:
#      - ./data:/app/data
#      - ./models:/app/models
#      - ./.dvc:/app/.dvc
#      - ./.dvc/config:/app/.dvc/config
#      - ./.dvcignore:/app/.dvcignore
#      - ./dvc.yaml:/app/dvc.yaml
#      - ./config.yaml:/app/config.yaml
#      - ./src:/app/src
#      - ./.git:/app/.git
#    working_dir: /app

volumes:
  postgres_data:
