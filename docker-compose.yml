version: '3.8'

# Utilisation de valeurs fixes pour UID et GID
x-user-info: &user-info
  USER_ID: "1000"
  GROUP_ID: "1000"

services:
  extract_data:
    build:
      context: .
      dockerfile: src/extract_data/Dockerfile
      args:
        <<: *user-info
    container_name: extract_data_service
    command: python extract_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app

  synthet_data:
    build:
      context: .
      dockerfile: src/synthet_data/Dockerfile
      args:
        <<: *user-info
    container_name: synthet_data_service
    command: python synthet_data.py
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      extract_data:
        condition: service_completed_successfully

  prepare_data:
    build:
      context: .
      dockerfile: src/prepare_data/Dockerfile
      args:
        <<: *user-info
    container_name: prepare_data_service
    command: sh -c "python prepare_data.py"
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      synthet_data:
        condition: service_completed_successfully

  train_model:
    build:
      context: .
      dockerfile: src/train_model/Dockerfile
      args:
        <<: *user-info
    container_name: train_model_service
    command: sh -c "python train_model.py"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config.yaml:/app/config.yaml
    working_dir: /app
    depends_on:
      prepare_data:
        condition: service_completed_successfully

  postgres:
    build:
      context: .
      dockerfile: src/postgresql/Dockerfile
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      train_model:
        condition: service_completed_successfully

  data_import:
    build:
      context: .
      dockerfile: src/data_import/Dockerfile
    container_name: data_import_service
    command: sh -c "/app/wait-for-postgres.sh postgres 5432 python3 /app/import_data.py"
    volumes:
      - ./data:/app/data
      - ./config.yaml:/app/config.yaml
      - ./models:/app/models
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: road_accidents
    depends_on:
      postgres:
        condition: service_healthy

  auto_dvc:
    build:
      context: .
      dockerfile: src/auto_dvc/Dockerfile
      args:
        <<: *user-info
    container_name: auto_dvc_service
    user: root
    command: >
      sh -c "
        chown -R appuser:appuser /app/.dvc;
        su -c 'python auto_dvc.py' appuser
      "
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./.dvc:/app/.dvc
      - ./.dvc/config.local:/app/.dvc/config.local
      - ./.dvcignore:/app/.dvcignore
      - ./dvc.yaml:/app/dvc.yaml
      - ./dvc.lock:/app/dvc.lock
      - ./config.yaml:/app/config.yaml
      - ./src:/app/src
      - ./.git:/app/.git
    working_dir: /app
    depends_on:
      data_import:
        condition: service_completed_successfully

volumes:
  postgres_data:
